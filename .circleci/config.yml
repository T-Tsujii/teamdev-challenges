version: 2.1
jobs:
  build:
    parallelism: 3
    docker:
      - image: circleci/ruby:2.6.4-node
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:11-alpine
        environment:
          POSTGRES_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            gem install bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - run:
          name: Which bundler?
          command: bundle -v

      - restore_cache:
          keys:
            - teamdev_challenges-bundle-v2-{{ checksum "Gemfile.lock" }}
            - teamdev_challenges-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check --path vendor/bundle || bundle install --deployment

      - save_cache:
          key: teamdev_challenges-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: |
            mv ./config/database.yml.ci ./config/database.yml
            bin/rails db:create db:schema:load --trace
            bin/rails db:migrate

      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      - store_test_results:
          path: test_results

  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: build docker image
          command: docker build --rm=false -t registry.heroku.com/${HEROKU_APP_NAME}/web ./docker_test/
      - run:
          name: setup heroku command
          command: bash .circleci/setup_heroku.sh
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          name: push container to registry.heroku.com
          command: |
            docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:push web --app ${HEROKU_APP_NAME}
            heroku container:release web --app ${HEROKU_APP_NAME}
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}

workflows:
  version: 2.1
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master